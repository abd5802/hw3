---
title: "Homework 3"
author: "[Ann DeFrancesco]{style='background-color: yellow;'}"
toc: true
title-block-banner: true
title-block-style: default
format: html
# format: pdf
---

---

::: {.callout-important style="font-size: 0.8em;"}

Please read the instructions carefully before submitting your assignment.

1. This assignment requires you to only upload a `PDF` file on Canvas
1. Don't collapse any code cells before submitting. 
1. Remember to make sure all your code output is rendered properly before uploading your submission.

⚠️ Please add your name to the author information in the frontmatter before submitting your assignment ⚠️
:::

For this assignment, we will be using the [Wine Quality](https://archive.ics.uci.edu/ml/datasets/wine+quality) dataset from the UCI Machine Learning Repository. The dataset consists of red and white _vinho verde_ wine samples, from the north of Portugal. The goal is to model wine quality based on physicochemical tests

We will be using the following libraries:

```{R}
library(readr)
library(tidyr)
library(dplyr)
library(purrr)
library(car)
library(glmnet)
library(broom)
library(lmtest)
```

<br><br><br><br>
---

## Question 1
::: {.callout-tip}
## 50 points
Regression with categorical covariate and $t$-Test
:::

###### 1.1 (5 points)

Read the wine quality datasets from the specified URLs and store them in data frames `df1` and `df2`.

```{R}
url1 <- "https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv"

url2 <- "https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv"


df1 <- read.csv(url1, sep = ';')
df2 <- read.csv(url2, sep = ';')

df1
df2
```

---

###### 1.2 (5 points)

Perform the following tasks to prepare the data frame `df` for analysis:

1. Combine the two data frames into a single data frame `df`, adding a new column called `type` to indicate whether each row corresponds to white or red wine. 
1. Rename the columns of `df` to replace spaces with underscores
1. Remove the columns `fixed_acidity` and `free_sulfur_dioxide`
1. Convert the `type` column to a factor
1. Remove rows (if any) with missing values.


```{R}
#add new 'type' cols in df1 and df2 then combine into df
df1$type <- "white"
df2$type <- "red"
df <- rbind(df1, df2) 

#rename columns
df <- rename(df, 
       fixed_acidity = fixed.acidity,
       volatile_acidity = volatile.acidity,
       citric_acid = citric.acid,
       residual_sugar = residual.sugar,
       free_sulfur_dioxide = free.sulfur.dioxide,
       total_sulfur_dioxide = total.sulfur.dioxide
       )

#remove columns 
df <- subset(df, select = -c(fixed_acidity, free_sulfur_dioxide))

#convert type col to a factor
df$type <- as.factor(df$type)

#remove na values
na.omit(df)
```


Your output to `R dim(df)` should be
```{R}
dim(df)
```

[1] 6497   11

---

###### 1.3 (20 points)

Recall from STAT 200, the method to compute the $t$ statistic for the the difference in means (with the equal variance assumption)

1. Using `df` compute the mean of `quality` for red and white wine separately, and then store the difference in means as a variable called `diff_mean`. 

2. Compute the pooled sample variance and store the value as a variable called `sp_squared`. 

3. Using `sp_squared` and `diff_mean`, compute the $t$ Statistic, and store its value in a variable called `t1`.


```{R}
#difference of means for quality wines
diff_mean <- (mean(subset(df, type == "white")$quality)) - (mean(subset(df, type == "red")$quality))
diff_mean

#pooled sample variance 
var_red <- var(subset(df, type == "red")$quality)
var_white <- var(subset(df, type == "white")$quality)
n_red <- sum(df$type == "red")
n_white <- sum(df$type == "white")
sp_squared <- ((n_red - 1) * var_red + (n_white - 1) * var_white) / (n_red + n_white - 2)
sp_squared

#t statistic 
t1 <- diff_mean / sqrt(sp_squared * (1/n_red + 1/n_white))
t1
```


---

###### 1.4 (10 points)

Equivalently, R has a function called `t.test()` which enables you to perform a two-sample $t$-Test without having to compute the pooled variance and difference in means. 

Perform a two-sample t-test to compare the quality of white and red wines using the `t.test()` function with the setting `var.equal=TRUE`. Store the t-statistic in `t2`.

```{R}
#two sample t test with equal variances
t_result <- t.test(quality ~ type, data = df, var.equal = TRUE)
t2 <- t_result$statistic
t2
```

---

###### 1.5 (5 points)

Fit a linear regression model to predict `quality` from `type` using the `lm()` function, and extract the $t$-statistic for the `type` coefficient from the model summary. Store this $t$-statistic in `t3`.

```{R}
#fit linear regression model 
model <- lm(quality ~ type, data = df)
summary_coef <- summary(model)$coefficients
t3 <- summary_coef["typewhite", "t value"]  
t3 
```


---

###### 1.6  (5 points)

Print a vector containing the values of `t1`, `t2`, and `t3`. What can you conclude from this? Why?

```{R}
c(t1, t2, t3)
```




<br><br><br><br>
<br><br><br><br>
---

## Question 2
::: {.callout-tip}
## 25 points
Collinearity
:::


---

###### 2.1 (5 points)

Fit a linear regression model with all predictors against the response variable `quality`. Use the `broom::tidy()` function to print a summary of the fitted model. What can we conclude from the model summary?


```{R}
#summary of fitted model
lm_summary <- tidy(lm(quality ~ ., data = df))
lm_summary
```


---

###### 2.2 (10 points)

Fit two **simple** linear regression models using `lm()`: one with only `citric_acid` as the predictor, and another with only `total_sulfur_dioxide` as the predictor. In both models, use `quality` as the response variable. How does your model summary compare to the summary from the previous question?


```{R}
#simple linear regression with citric acid
model_citric <- lm(quality ~ citric_acid, data = df)
summary(model_citric)
```

```{R}
#simple linear regression with total sulfur dioxide
model_total_sulfur_dioxide <- lm(quality ~ total_sulfur_dioxide, data = df)
summary(model_total_sulfur_dioxide)
```


---

###### 2.3 (5 points)

Visualize the correlation matrix of all numeric columns in `df` using `corrplot()`

```{R}
library(corrplot)
#correlation matrix
numeric_columns <- sapply(df, is.numeric)
correlation_matrix <- cor(df[, numeric_columns])
corrplot(correlation_matrix, method = "color")
```



---

###### 2.4 (5 points)

Compute the variance inflation factor (VIF) for each predictor in the full model using `vif()` function. What can we conclude from this?


```{R}
#VIF
lm(quality ~ ., data = df)
vif_scores <- vif(lm_model)
vif_scores
```



<br><br><br><br>
<br><br><br><br>
---

## Question 3
::: {.callout-tip}
## 40 points

Variable selection
:::


---

###### 3.1 (5 points)

Run a backward stepwise regression using a `full_model` object as the starting model. Store the final formula in an object called `backward_formula` using the built-in `formula()` function in R

```{R}
#backward stepwise regression
backward_formula <- formula(step(lm_model, direction = "backward"))
backward_formula
```

---

###### 3.2 (5 points)

Run a forward stepwise regression using a `null_model` object as the starting model. Store the final formula in an object called `forward_formula` using the built-in `formula()` function in R

```{R}
#forward stepwise
null_model <- lm(quality ~ 1, data = df)
forward_model <- step(null_model, direction = "forward", scope = formula(~ .), data = df)
forward_formula <- formula(forward_model)
forward_formula
```



---

###### 3.3  (10 points)

1. Create a `y` vector that contains the response variable (`quality`) from the `df` dataframe. 

2. Create a design matrix `X` for the `full_model` object using the `make_model_matrix()` function provided in the Appendix. 

3. Then, use the `cv.glmnet()` function to perform LASSO and Ridge regression with `X` and `y`.

```{R}
#y vector and x matrix
y <- df$quality
X <- model.matrix(lm_model)

#lasso and ridge regression models
data_matrix <- data.frame(X, y)
alpha_values <- c(0, 1)
cv_lasso <- cv.glmnet(as.matrix(X), y, alpha = 1)
cv_ridge <- cv.glmnet(as.matrix(X), y, alpha = 0)
cv_lasso
cv_ridge
```

Create side-by-side plots of the ridge and LASSO regression results. Interpret your main findings. 

```{R}
#side by side plots
par(mfrow = c(1, 2)) 
plot(cv_lasso, main = "LASSO Regression", col = c("blue", "red"), lwd = 2)
plot(cv_ridge, main = "Ridge Regression", col = c("blue", "red"), lwd = 2)
par(mfrow = c(1, 1))
```
for both plots, smaller lambdas mean more complex models with larger corfficients while larger lambdas mean sparser models with smaller coefficients. 


---

###### 3.4  (5 points)

Print the coefficient values for LASSO regression at the `lambda.1se` value? What are the variables selected by LASSO? 

Store the variable names with non-zero coefficients in `lasso_vars`, and create a formula object called `lasso_formula` using the `make_formula()` function provided in the Appendix. 
```{R}
#coefficient values for lasso
ridge_coef <- coef(cv_lasso, s = "lambda.1se")
ridge_vars <- rownames(ridge_coef)[ridge_coef[, 1] != 0]
ridge_formula <- as.formula(paste("quality ~", paste(ridge_vars, collapse = " + ")))

ridge_coef
ridge_vars
ridge_formula
```


---

###### 3.5  (5 points)

Print the coefficient values for ridge regression at the `lambda.1se` value? What are the variables selected here? 

Store the variable names with non-zero coefficients in `ridge_vars`, and create a formula object called `ridge_formula` using the `make_formula()` function provided in the Appendix. 
```{R}
#coefficient values for ridge
ridge_coef <- coef(cv_ridge, s = "lambda.1se")
ridge_vars <- rownames(ridge_coef)[ridge_coef[, 1] != 0]
ridge_formula <- as.formula(paste("quality ~", paste(ridge_vars, collapse = " + ")))

ridge_coef
ridge_vars
ridge_formula
```


---

###### 3.6  (10 points)

What is the difference between stepwise selection, LASSO and ridge based on you analyses above?

Stepwise selection adds or removes predictors based on specific criteria, which can lead to overfitting and sensitivity to small data changes. LASSO introduces a penalty term, producing sparse models with exactly zero coefficients, effectively performing variable selection and handling multicollinearity well. Ridge regression, with a different penalty term, distributes the impact of predictors and handles multicollinearity effectively, but doesn't produce sparse models as it shrinks coefficients without making them exactly zero.

<br><br><br><br>
<br><br><br><br>
---

## Question 4
::: {.callout-tip}
## 70 points

Variable selection
:::

---

###### 4.1  (5 points)

Excluding `quality` from `df` we have $10$ possible predictors as the covariates. How many different models can we create using any subset of these $10$ coavriates as possible predictors? Justify your answer. 

There are 1024 different models that can be created using any subset of the 10 covariates as possible predictors in the dataset. This count includes models with individual covariates, pairs, triplets, and up to the model with all 10 covariates. The total number is determined by the power set principle, 2^10, which accounts for all possible combinations of covariates.

---


###### 4.2  (20 points)

Store the names of the predictor variables (all columns except `quality`) in an object called `x_vars`.

```{R}
#predictor values
x_vars <- colnames(df %>% select(-quality))
x_vars
```

Use: 

* the `combn()` function (built-in R function) and 
* the `make_formula()` (provided in the Appendix) 

to **generate all possible linear regression formulas** using the variables in `x_vars`. This is most optimally achieved using the `map()` function from the `purrr` package.

```{R}
formulas <- map(
  1:length(x_vars),
  \(x){
    vars <- combn(x_vars, x, simplify = FALSE) # Insert code here
    map(vars, ~ as.formula(paste("quality ~", paste(.x, collapse = "+")))) # Insert code here
  }
) %>% unlist()
```

If your code is right the following command should return something along the lines of:

```{R}
sample(formulas, 4) %>% as.character()
# Output:
# [1] "quality ~ volatile_acidity + residual_sugar + density + pH + alcohol"                                                 
# [2] "quality ~ citric_acid"                                                                                                
# [3] "quality ~ volatile_acidity + citric_acid + residual_sugar + total_sulfur_dioxide + density + pH + sulphates + alcohol"
# [4] "quality ~ citric_acid + chlorides + total_sulfur_dioxide + pH + alcohol + type"  
```

---

###### 4.3  (10 points)
Use `map()` and `lm()` to fit a linear regression model to each formula in `formulas`, using `df` as the data source. Use `broom::glance()` to extract the model summary statistics, and bind them together into a single tibble of summaries using the `bind_rows()` function from `dplyr`.

```{R}
models <- map(formulas, ~ lm(.x, data = df) %>% broom::glance())
summaries <- bind_rows(model_summaries)
summaries
```



---


###### 4.4  (5 points)

Extract the `adj.r.squared` values from `summaries` and use them to identify the formula with the _**highest**_ adjusted R-squared value.

```{R}
#identifying formula with highest adjusted R squared value
adj_r_squared_values <- map_dbl(summaries, "adj.r.squared")
index_highest_adj_r_squared <- which.max(adj_r_squared_values)
formula_with_highest_adj_r_squared <- formulas[index_highest_adj_r_squared]

formula_with_highest_adj_r_squared
adj_r_squared_values[index_highest_adj_r_squared]
```

Store resulting formula as a variable called `rsq_formula`.

```{R}
rsq_formula <- formula_with_highest_adj_r_squared
```

---

###### 4.5  (5 points)

Extract the `AIC` values from `summaries` and use them to identify the formula with the **_lowest_** AIC value.


```{R}
aic_values <- map_dbl(summaries, "AIC")
index_lowest_aic <- which.min(aic_values)
formula_with_lowest_aic <- formulas[index_lowest_aic]

formula_with_lowest_aic
aic_values[index_lowest_aic]
```

Store resulting formula as a variable called `aic_formula`.


```{R}
aic_formula <- formula_with_lowest_aic
```

---

###### 4.6  (15 points)

Combine all formulas shortlisted into a single vector called `final_formulas`.

```{R}
null_formula <- formula(null_model)
full_formula <- formula(full_model)

final_formulas <- c(
  null_formula,
  full_formula,
  backward_formula,
  forward_formula,
  lasso_formula, 
  ridge_formula,
  rsq_formula,
  aic_formula
)
```

* Are `aic_formula` and `rsq_formula` the same? How do they differ from the formulas shortlisted in question 3?

* Which of these is more reliable? Why? 

* If we had a dataset with $10,000$ columns, which of these methods would you consider for your analyses? Why?

---

###### 4.7  (10 points)


Use `map()` and `glance()` to extract the `sigma, adj.r.squared, AIC, df`, and `p.value` statistics for each model obtained from `final_formulas`. Bind them together into a single data frame `summary_table`. Summarize your main findings.

```{R}
# summary_table <- map(
#   final_formulas, 
#   \(x) ... # Insert your code here
# ) %>% bind_rows()


summary_table <- map(
  final_formulas, 
  ~ lm(.x, data = df) 
  %>% broom::glance()
) %>% bind_rows()

summary_table %>% knitr::kable()
```





:::{.hidden unless-format="pdf"}
\pagebreak
:::

<br><br><br><br>
<br><br><br><br>
---


# Appendix


#### Convenience function for creating a formula object

The following function which takes as input a vector of column names `x` and outputs a `formula` object with `quality` as the response variable and the columns of `x` as the covariates. 

```{R}
make_formula <- function(x){
  as.formula(
    paste("quality ~ ", paste(x, collapse = " + "))
  )
}

# For example the following code will
# result in a formula object
# "quality ~ a + b + c"
make_formula(c("a", "b", "c"))
```

#### Convenience function for `glmnet`

The `make_model_matrix` function below takes a `formula` as input and outputs a **rescaled** model matrix `X` in a format amenable for `glmnet()`

```{R}
make_model_matrix <- function(formula){
  X <- model.matrix(formula, df)[, -1]
  cnames <- colnames(X)
  for(i in 1:ncol(X)){
    if(!cnames[i] == "typewhite"){
      X[, i] <- scale(X[, i])
    } else {
      colnames(X)[i] <- "type"
    }
  }
  return(X)
}
```




::: {.callout-note collapse="true"}
## Session Information

Print your `R` session information using the following command

```{R}
sessionInfo()
```
:::